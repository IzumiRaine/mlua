error[E0373]: closure may outlive the current function, but it borrows `inner`, which is owned by the current function
  --> $DIR/scope_callback_inner.rs:12:34
   |
9  |     lua.scope(|scope| -> Result<()> {
   |                ----- has type `&mlua::scope::Scope<'1>`
...
12 |             .create_function_mut(|_, t: Table| {
   |                                  ^^^^^^^^^^^^^ may outlive borrowed value `inner`
13 |                 inner = Some(t);
   |                 ----- `inner` is borrowed here
   |
note: function requires argument type to outlive `'1`
  --> $DIR/scope_callback_inner.rs:11:17
   |
11 |           let f = scope
   |  _________________^
12 | |             .create_function_mut(|_, t: Table| {
13 | |                 inner = Some(t);
14 | |                 Ok(())
15 | |             })?;
   | |______________^
help: to force the closure to take ownership of `inner` (and any other referenced variables), use the `move` keyword
   |
12 |             .create_function_mut(move |_, t: Table| {
   |                                  ^^^^^^^^^^^^^^^^^^
